import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

public class CheckersGame extends JFrame {

    private JButton[][] boardButtons;
    private int[][] board;
    private int currentPlayer;

    public CheckersGame() {
        setTitle("Checkers Game");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        initializeBoard();
        createGUI();

        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initializeBoard() {
        board = new int[8][8];
        currentPlayer = 1; // Player 1 starts

        // Initialize the board with pieces
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i + j) % 2 != 0) {
                    board[i][j] = 1; // Player 1's pieces
                }
            }
        }

        for (int i = 5; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i + j) % 2 != 0) {
                    board[i][j] = 2; // Player 2's pieces
                }
            }
        }
    }

    private void createGUI() {
        setLayout(new GridLayout(8, 8));
        boardButtons = new JButton[8][8];

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                boardButtons[i][j] = new JButton();
                boardButtons[i][j].setBackground((i + j) % 2 == 0 ? Color.WHITE : Color.BLACK);
                boardButtons[i][j].addActionListener(new BoardButtonListener(i, j));
                updateButtonIcon(i, j);
                add(boardButtons[i][j]);
            }
        }
    }

    private void updateButtonIcon(int row, int col) {
        if (board[row][col] == 1) {
            boardButtons[row][col].setIcon(createPieceIcon("Red-removebg-preview.png"));
        } else if (board[row][col] == 2) {
            boardButtons[row][col].setIcon(createPieceIcon("Black-removebg-preview.png"));
        } else {
            boardButtons[row][col].setIcon(null);
        }
    }

    private ImageIcon createPieceIcon(String imagePath) {
        ImageIcon icon = new ImageIcon(imagePath);
        Image image = icon.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH);
        return new ImageIcon(image);
    }

    private class BoardButtonListener implements ActionListener {
        private int row;
        private int col;

        public BoardButtonListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (board[row][col] == currentPlayer) {
                // Handle the selection of a piece
                // Implement logic for moving the piece, checking for valid moves, and updating
                // the board

                // For simplicity, let's just switch the player for each move
                currentPlayer = (currentPlayer == 1) ? 2 : 1;

                // Update the GUI after the move
                updateBoardGUI();
            }
        }
    }

    private void updateBoardGUI() {
        // Update the graphical representation of the board after a move
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                updateButtonIcon(i, j);
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new CheckersGame());
    }
}
